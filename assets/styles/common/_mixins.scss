@mixin hover-focus {
  &:focus,
  &:hover {
    @content
  }
}

@mixin hover-focus-active {
  &:focus,
  &:active,
  &:hover {
    @content
  }
}

/****************************************
*
* UNDERLINE
* makes underline for element
*
****************************************/

@mixin underline( $margin: 8px, $padding: 0px, $color: $primary-color, $align: "left", $position: "bottom", $size: 128px, $height: 4px ) {
  position: relative;
  display: block;

  @if $position == "bottom" {
    margin-bottom: $margin;
    padding-bottom: $padding;
  }
  @else {
    margin-top: $margin;
    padding-top: $padding;
  }

  @if $position == "top" {

    &:before {
      content: "";
      position: absolute;
      width: $size;
      height: $height;
      background-color: $color;

      @if $position == "bottom" {
        bottom: 0;
      }
      @else {
        top: 0;
      }

      @if $align == "left" {
        left: 0;
      }
      @else {
        left: 50%;
        @include transform(translateX(-50%));
      }
    }

  }
  @else {

    &:after {
      content: "";
      position: absolute;
      width: $size;
      height: $height;
      background-color: $color;

      @if $position == "bottom" {
        bottom: 0;
      }
      @else {
        top: 0;
      }

      @if $align == "left" {
        left: 0;
      }
      @else {
        left: 50%;
        @include transform(translateX(-50%));
      }
    }

  }
}

/****************************************
*
* MAKE DOT
* makes element nav / slider dot
*
****************************************/

@mixin make-dot( $size: $dot-size, $background: $primary-color, $thickness: 2px ) {
  position: relative;
  width: $size;
  height: $size;
  &:after {
    content: "";
    @include absolute-center;
    background-color: $background;
    // border: $thickness solid $background;
    border-radius: 50%;
    width: $size;
    height: $size;
  }
}
@mixin make-active-dot() {
  background: $secondary-color;
  height: 1.5*$dot-size;
  width: 1.5*$dot-size;
}

/****************************************
*
* PLACEHOLDER
* styling for placeholders
*
****************************************/

@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }

  @include optional-at-root(':-moz-placeholder') {
    @content;
  }

  @include optional-at-root('::-moz-placeholder') {
    @content;
  }

  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
}

/****************************************
*
* WEBKIT AUTOFULL
* styling for autofill
*
****************************************/

@mixin add-autofill($color) {

  @include keyframes(autofill) {
    to {
      background: transparent;
      color: $color;
      border-color: transparent;
    }
  }

}

@mixin webkit-autofill {
  &:-webkit-autofill {
    @include animation-name(autofill);
    @include animation-fill-mode(both);
  }
}

/****************************************
*
* tsm TRIANGLE
* extends css-triangle mixin
*
****************************************/
@mixin tsm-triangle(
  $triangle-size,
  $triangle-color,
  $triangle-direction: right,
  $append: after,
  $position: null
  ) {
  position: relative;
  &:#{$append} {
    display: inline-block;
    width: 0;
    height: 0;
    border: inset;
    content: '';

    @if ($position != null) {
      position: $position;
    }

    @if ($triangle-direction == down) {
      border-bottom-width: 0;
      border-top-style: solid;
      border-color: $triangle-color transparent transparent;
      border-width: $triangle-size $triangle-size * .6 0;
    }
    @if ($triangle-direction == up) {
      border-top-width: 0;
      border-bottom-style: solid;
      border-color: transparent transparent $triangle-color;
      border-width: 0 $triangle-size * .6 $triangle-size;
    }
    @if ($triangle-direction == right) {
      border-right-width: 0;
      border-left-style: solid;
      border-color: transparent transparent transparent $triangle-color;
      border-width: $triangle-size * .6 0 $triangle-size * .6 $triangle-size;
    }
    @if ($triangle-direction == left) {
      border-left-width: 0;
      border-right-style: solid;
      border-color: transparent $triangle-color transparent transparent;
      border-width: $triangle-size * .6  $triangle-size $triangle-size * .6 0;
    }
  }
}

/****************************************
*
* POSITION MIXINS
*
****************************************/

@mixin overlay(
  $opacity: 1,
  $background: "transparent"
  ) {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  @if ($opacity < 1) {
    @include opacity($opacity);
  }
  @if ($background != "transparent") {
    background-color: $background;
  }
}

/****************************************
*
* BACKGROUND MIXINS
*
****************************************/

@mixin bg-cover {
  background-size: cover;
  background-repeat: no-repeat;
}

@mixin bg-responsive {
  @include bg-cover;
  @include overlay;
}

@mixin bg-responsive-mobile {
  @include bg-cover;
  @include overlay;
  background-position: right top;
}

/****************************************
*
* center vertically and/or horizontally an absolute positioned element
*
****************************************/

@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    @include transform(translateX(-50%) translateY(-50%));
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    @include transform(translateX(-50%));
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    @include transform(translateY(-50%));
  }
}

